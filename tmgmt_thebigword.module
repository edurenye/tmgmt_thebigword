<?php

/**
 * @file
 * Module file of the Translation Management thebigword module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_thebigword_tmgmt_translator_plugin_info() {
  return array(
    'thebigword' => array(
      'label' => t('thebigword Connector for Drupal'),
      'description' => t('thebigword translation service enabled by thebigword Connector for Drupal.'),
      'plugin controller class' => 'TMGMTTheBigWordPluginController',
      'ui controller class' => 'TMGMTTheBigWordTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_thebigword_menu() {
  return array(
    'tmgmt_thebigword_callback' => array(
      'title' => 'TMGMT Thebigword Callback',
      'description' => '',
      'page callback' => 'tmgmt_thebigword_callback',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'admin/tmgmt/overview/tmgmt_thebigword_pull_all_remote' => array(
      'title' => 'Pull all thebigword translations',
      'page callback' => 'tmgmt_thebigword_pull_all_remote',
      'access callback' => 'tmgmt_thebigword_pull_access',
      'type' => MENU_LOCAL_ACTION,
    ),
  );
}

/**
 * Callback for TheBigWord requests.
 */
function tmgmt_thebigword_callback() {
  $project_id = $_GET['ProjectId'];
  $file_id = $_GET['FileId'];
  if (isset($project_id) && isset($file_id)) {
    // Get mappings between the job items and the file IDs, for the project.
    /** @var TMGMTRemoteController $remote_mapping_controller */
    $remote_mapping_controller = entity_get_controller('tmgmt_remote');
    $remotes = $remote_mapping_controller->loadByRemoteIdentifier('tmgmt_thebigword', $project_id);
    if (empty($remotes)) {
      watchdog('tmgmt_thebigword', 'Project %id not found', array('%id' => $project_id), WATCHDOG_WARNING);
      return new HttpResponse(t('Project %id not found', array('%id' => $project_id)), 404);
    }
    /** @var TMGMTRemote $remote */
    foreach ($remotes as $remote) {
      $files = $remote->getRemoteData('files');
      if (!isset($files[$file_id])) {
        watchdog('tmgmt_thebigword', 'File %id not found', array('%id' => $file_id), WATCHDOG_WARNING);
        return new HttpResponse(t('File %id not found', array('%id' => $file_id)), 404);
      }
    }

    /** @var TMGMTTheBigWordPluginController $translator_plugin */
    $translator_plugin = $remote->getJob()->getTranslatorController();
    $info = $translator_plugin->getConnector($remote->getJob()->getTranslator())->request('fileinfo/' . $file_id);
    $translator_plugin->getConnector($remote->getJob()->getTranslator())->fetchTranslatedFiles($remote->getJob(), $info['FileState'], $project_id);
  }
  else {
    return new HttpResponse('Bad request.', 400);
  }
  return new HttpResponse();
}

/**
 * Callback for TheBigWord requests.
 */
function tmgmt_thebigword_pull_all_remote() {
  $translators = entity_load('tmgmt_translator');
  $updated = 0;
  $non_updated = 0;

  /** @var TMGMTTranslator $translator */
  foreach ($translators as $translator) {
    $translator_plugin = $translator->getController();
    if ($translator_plugin instanceof TMGMTTheBigWordPluginController) {
      try {
        $result = $translator_plugin->getConnector($translator)->pullAllRemoteTranslations();
        $updated += $result['updated'];
        $non_updated += $result['non-updated'];
      }
      catch (TMGMTException $e) {
        drupal_set_message(t('Could not pull translation resources due to the following error: @message',
          array('@message' => $e->getMessage())), 'error');
      }
    }
  }
  if ($non_updated == 0 && $updated != 0) {
    drupal_set_message(t('Fetched @updated translation updates.', array('@updated' => $updated)));
  }
  elseif ($updated == 0) {
    drupal_set_message(t('Nothing has been updated.'));
  }
  else {
    drupal_set_message(t('Fetched @updated translation updates, @non-updated where not fetched.', array(
      '@updated' => $updated,
      '@non-updated' => $non_updated,
    )));
  }
  drupal_goto('admin/tmgmt/overview');
}

/**
 * Determine whether the user can pull remote translations.
 *
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return boolean
 *   Returns TRUE if the current user can pull remote translations.
 */
function tmgmt_thebigword_pull_access($account = NULL) {
  return user_access('administer tmgmt', $account) || user_access('accept translation jobs', $account);
}

/**
 * Validation callback for the plugin settings form.
 */
function tmgmt_thebigword_plugin_settings_form_validate($element, &$form_state, $form) {
  $settings = $form_state['values']['settings'];
  /** @var TMGMTTranslator $translator */
  $translator = $form_state['tmgmt_translator'];
  // Update translator settings with form data.
  $translator->settings = $settings;
  /** @var TMGMTTheBigWordPluginController $controller */
  $controller = $translator->getController();
  $result = $controller->getConnector($translator)->request('states', 'GET', array(), FALSE, TRUE);
  if ($result == 401) {
    form_error($element, t('The client contact key is not correct.'));
  }
  elseif ($result != 200) {
    form_error($element, t('The Web API endpoint is not correct.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_thebigword_form_tmgmt_job_form_alter(&$form, &$form_state) {
  /** @var TMGMTJob $job */
  $job = $form_state['tmgmt_job'];
  if ($job->getTranslator()->plugin == 'thebigword') {
    /** @var TMGMTRemoteController $remote_mapping_controller */
    $remote_mapping_controller = entity_get_controller('tmgmt_remote');
    $remotes = $remote_mapping_controller->loadByLocalData($job->tjid);
    if (count($remotes) == 1) {
      /** @var TMGMTRemote $remote */
      $remote = reset($remotes);
      $project_id = $remote->remote_identifier_2;
      $form['info'][] = array(
        '#type' => 'item',
        '#title' => t('Project ID'),
        '#markup' => $project_id,
        '#prefix' => '<div id="tmgmt-ui-thebigword-project-id" class="tmgmt-ui-thebigword-project-id tmgmt-ui-info-item">',
        '#suffix' => '</div>',
        '#value' => $project_id,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_thebigword_form_tmgmt_ui_node_translation_review_form_alter(&$form, &$form_state) {
  /** @var TMGMTJobItem $job_item */
  $job_item = $form_state['item'];
  if ($job_item->getTranslator()->plugin == 'thebigword') {
    /** @var TMGMTRemoteController $remote_mapping_controller */
    $remote_mapping_controller = entity_get_controller('tmgmt_remote');
    $remotes = $remote_mapping_controller->loadByLocalData($job_item->tjid, $job_item->tjiid);
    if (!empty($remotes)) {
      /** @var TMGMTRemote $remote */
      $remote = reset($remotes);
      $project_id = $remote->remote_identifier_2;
      $form['info'][] = array(
        '#type' => 'item',
        '#title' => t('Project ID'),
        '#markup' => $project_id,
        '#prefix' => '<div id="tmgmt-ui-thebigword-project-id" class="tmgmt-ui-thebigword-project-id tmgmt-ui-info-item">',
        '#suffix' => '</div>',
        '#value' => $project_id,
      );
      $data = $remote->getRemoteData('files');
      $files = reset($data);

      $file_id = $files['FileId'];
      $form['info'][] = array(
        '#type' => 'item',
        '#title' => t('File ID'),
        '#markup' => $file_id,
        '#prefix' => '<div id="tmgmt-ui-thebigword-file-id" class="tmgmt-ui-thebigword-file-id tmgmt-ui-info-item">',
        '#suffix' => '</div>',
        '#value' => $file_id,
      );
    }
  }
}

/**
 * Submit callback to pull translations form TheBigWord.
 */
function _tmgmt_thebigword_pull_submit($form, &$form_state) {
  $translated = 0;
  $untranslated = 0;
  /** @var TMGMTJob $job */
  $job = $form_state['tmgmt_job'];

  /** @var TMGMTRemoteController $remote_mapping_controller */
  $remote_mapping_controller = entity_get_controller('tmgmt_remote');
  $result = $remote_mapping_controller->loadByLocalData($job->tjid);
  $remote = reset($result);
  $project_id = $remote->remote_identifier_2;

  /** @var TMGMTTheBigWordPluginController $translator_controller */
  $translator_controller = $job->getTranslatorController();
  $result = $translator_controller->getConnector($job->getTranslator())->fetchTranslatedFiles($job, 'TranslatableComplete', $project_id);
  $translated += $result['translated'];
  $untranslated += $result['untranslated'];
  if ($untranslated == 0 && $translated != 0) {
    $job->addMessage('Fetched translations for @translated job items.', array('@translated' => $translated));
  }
  else {
    if ($translated == 0) {
      drupal_set_message('No job item has been translated yet.');
    }
    else {
      $job->addMessage('Fetched translations for @translated job items, @untranslated are not translated yet.', array(
        '@translated' => $translated,
        '@untranslated' => $untranslated,
      ));
    }
  }
  tmgmt_ui_write_request_messages($job);
}

/**
 * Return the data with the data key of the mapping with the given Project ID.
 *
 * @param int $project_id
 *   The project ID.
 * @param string $data_key
 *   The key of the data you want to retrieve from the mapping.
 *
 * @return mixed
 *   The data stored in the mapping for that key.
 */
function tmgmt_thebigword_get_remote_data($project_id, $data_key) {
  /** @var TMGMTRemoteController $remote_mapping_controller */
  $remote_mapping_controller = entity_get_controller('tmgmt_remote');
  $mappings = $remote_mapping_controller->loadByRemoteIdentifier('tmgmt_thebigword', $project_id);
  if (!empty($mappings)) {
    /** @var TMGMTRemote $mapping */
    $mapping = reset($mappings);
    return $mapping->getRemoteData($data_key);
  }
  return NULL;
}

/**
 * TMGMT TheBigWord Exception class
 */
class TMGMTTheBigWordException extends Exception {

  /**
   * @param string $message
   * @param array $data
   *   Associative array of dynamic data that will be inserted into $message.
   * @param int $code
   */
  function __construct($message = "", $data = array(), $code = 0) {
    parent::__construct(strtr($message, $data), $code);
  }
}
